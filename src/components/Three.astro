---
import Type from '@/components/Type.astro'
---

<script type="module" hoist>
  import {
    PerspectiveCamera,
    Scene,
    AmbientLight,
    HemisphereLight,
    Group,
    MeshLambertMaterial,
    ExtrudeGeometry,
    Mesh,
    Box3,
    Vector3,
    WebGLRenderer,
    MathUtils,
  } from 'three'
  import { EffectComposer, RenderPass, KawaseBlurPass } from 'postprocessing'
  import { SVGLoader } from 'three/addons/loaders/SVGLoader.js'

  const svgMarkup =
    '<svg height="180" viewBox="0 0 1000 180" width="1000" xmlns="http://www.w3.org/2000/svg"><path d="m-1 160.23022v-19.8332l7.7716095-.59929c25.1512305-1.93952 43.3156985-15.71065 70.7653405-53.649688 21.734523-30.039989 27.52635-37.197145 40.66902-50.256042 25.64576-25.482299 48.20885-35.28871297 81.19403-35.28871297s55.54827 9.80641397 81.19403 35.28871297c13.14267 13.058897 18.9345 20.216053 40.66902 50.256042 30.59471 42.285928 46.87807 53.346458 78.53695 53.346458s47.94224-11.06053 78.53695-53.346458c21.73452-30.039989 27.52635-37.197145 40.66902-50.256042 25.64576-25.482299 48.20885-35.28871297 81.19403-35.28871297s55.54827 9.80641397 81.19403 35.28871297c13.14267 13.058897 18.9345 20.216053 40.66902 50.256042 30.59471 42.285928 46.87807 53.346458 78.53695 53.346458s47.94224-11.06053 78.53695-53.346458c21.73452-30.039989 27.52635-37.197145 40.66902-50.256042 23.45732-23.307806 44.07616-33.1844699 73.92953-35.41309138l7.2645-.54231142v19.8331878 19.833187l-7.77161.599304c-25.15123 1.939523-43.3157 15.710642-70.76534 53.649682-21.73452 30.039992-27.52635 37.197142-40.66902 50.256042-25.64576 25.4823-48.20885 35.28872-81.19403 35.28872s-55.54827-9.80642-81.19403-35.28872c-13.14267-13.0589-18.9345-20.21605-40.66902-50.256042-30.59471-42.285932-46.87807-53.346456-78.53695-53.346456s-47.94224 11.060524-78.53695 53.346456c-21.73452 30.039992-27.52635 37.197142-40.66902 50.256042-25.64576 25.4823-48.20885 35.28872-81.19403 35.28872s-55.54827-9.80642-81.19403-35.28872c-13.14267-13.0589-18.9345-20.21605-40.66902-50.256042-30.59471-42.285932-46.87807-53.346456-78.53695-53.346456s-47.94224 11.060524-78.53695 53.346456c-21.734524 30.039992-27.526355 37.197142-40.66902 50.256042-23.457318 23.3078-44.076165 33.18447-73.92953 35.41309l-7.2645.54232z" fill="#fff" stroke-width="1.002"/></svg>'
  const loader = new SVGLoader()
  const blueColor = 0x0018cc
  const pixelRatio = window.devicePixelRatio
  let winDim = getWinDims()
  const mousePos = [winDim[0] / 2, winDim[1] / 2]
  const initRot = [0.0008, 0.0005, 0.0003]
  let camera, scene, group, renderer, composer
  initScene()
  animate()

  function initScene() {
    camera = new PerspectiveCamera(10, winDim[0] / winDim[1], 0.1, 3000)
    camera.position.set(0, 0, 6.5)
    scene = new Scene()
    scene.add(new AmbientLight(blueColor))
    scene.add(new HemisphereLight(0xffffff, 1))
    const vectorData = loader.parse(svgMarkup)
    group = new Group()
    group.scale.multiplyScalar(0.004)
    group.scale.y *= -1
    group.rotation.set(initRot[0], initRot[1], initRot[2])
    const material = new MeshLambertMaterial({
      color: 0xffffff,
      depthWrite: true,
    })
    vectorData.paths.forEach((path, i) => {
      const shapes = path.toShapes(true)
      shapes.forEach((shape, j) => {
        const geometry = new ExtrudeGeometry(shape, {
          depth: 100,
          curveSegments: 16,
          bevelEnabled: false,
        })
        geometry.center()
        const mesh = new Mesh(geometry, material)
        group.add(mesh)
      })
    })
    const box = new Box3().setFromObject(group)
    const center = new Vector3()
    box.getCenter(center)
    group.position.sub(center)
    scene.add(group)
    renderer = new WebGLRenderer({
      powerPreference: 'high-performance',
      antialias: false,
      alpha: true,
      stencil: false,
      depth: false,
    })
    renderer.setPixelRatio(pixelRatio)
    renderer.setSize(winDim[0], winDim[1])
    composer = new EffectComposer(renderer)
    composer.addPass(new RenderPass(scene, camera))
    composer.addPass(
      new KawaseBlurPass({
        kernelSize: 5,
      })
    )
    document.querySelector('.three').appendChild(renderer.domElement)
    document.querySelector('.intro').addEventListener(
      'mousemove',
      (e) => {
        mousePos[0] = e.clientX
        mousePos[1] = e.clientY
      },
      false
    )
    window.addEventListener(
      'resize',
      () => {
        winDim = getWinDims()
        camera.aspect = winDim[0] / winDim[1]
        camera.updateProjectionMatrix()
        renderer.setSize(winDim[0], winDim[1])
      },
      false
    )
    animate()
  }

  function animate(time) {
    group.rotation.x = MathUtils.lerp(
      initRot[0] + group.rotation.x,
      mousePos[1] * Math.PI * 0.0002,
      0.01
    )
    group.rotation.y = MathUtils.lerp(
      initRot[1] + group.rotation.y,
      mousePos[0] * Math.PI * 0.0001,
      0.01
    )
    group.rotation.z += 0.0001
    composer.render()
    requestAnimationFrame(animate)
  }

  function getWinDims() {
    return [
      Math.max(
        document.documentElement.clientWidth || 0,
        window.innerWidth || 0
      ),
      Math.max(
        document.documentElement.clientHeight || 0,
        window.innerHeight || 0
      ),
    ]
  }
</script>

<div class="intro">
  <figure class="three"></figure>
  <div class="slogan">
    <Type Element="span" type="title">
      Hoi, ich bin ein Software Entwickler und Interaction Designer und arbeite
      zwischen digitalem und physischem Raum.
    </Type>
  </div>
  <figure class="blend-overlay"></figure>
</div>

<style lang="scss">
  @import '../assets/styles/_index.scss';
  .intro {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    flex: 1;
    color: $white;
    .three {
      position: fixed;
      inset: 0;
      background-color: $blue;
      overflow: hidden;
    }
    .slogan {
      position: relative;
      mix-blend-mode: difference;
    }
    .blend-overlay {
      position: fixed;
      inset: 0;
      background-color: $blue;
      mix-blend-mode: color;
      pointer-events: none;
      z-index: 2;
    }
  }
</style>
